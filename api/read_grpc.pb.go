// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package read

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TextToSpeechClient is the client API for TextToSpeech service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TextToSpeechClient interface {
	Read(ctx context.Context, in *Text, opts ...grpc.CallOption) (TextToSpeech_ReadClient, error)
}

type textToSpeechClient struct {
	cc grpc.ClientConnInterface
}

func NewTextToSpeechClient(cc grpc.ClientConnInterface) TextToSpeechClient {
	return &textToSpeechClient{cc}
}

func (c *textToSpeechClient) Read(ctx context.Context, in *Text, opts ...grpc.CallOption) (TextToSpeech_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &TextToSpeech_ServiceDesc.Streams[0], "/read.TextToSpeech/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &textToSpeechReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TextToSpeech_ReadClient interface {
	Recv() (*Speech, error)
	grpc.ClientStream
}

type textToSpeechReadClient struct {
	grpc.ClientStream
}

func (x *textToSpeechReadClient) Recv() (*Speech, error) {
	m := new(Speech)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TextToSpeechServer is the server API for TextToSpeech service.
// All implementations must embed UnimplementedTextToSpeechServer
// for forward compatibility
type TextToSpeechServer interface {
	Read(*Text, TextToSpeech_ReadServer) error
	mustEmbedUnimplementedTextToSpeechServer()
}

// UnimplementedTextToSpeechServer must be embedded to have forward compatible implementations.
type UnimplementedTextToSpeechServer struct {
}

func (UnimplementedTextToSpeechServer) Read(*Text, TextToSpeech_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedTextToSpeechServer) mustEmbedUnimplementedTextToSpeechServer() {}

// UnsafeTextToSpeechServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TextToSpeechServer will
// result in compilation errors.
type UnsafeTextToSpeechServer interface {
	mustEmbedUnimplementedTextToSpeechServer()
}

func RegisterTextToSpeechServer(s grpc.ServiceRegistrar, srv TextToSpeechServer) {
	s.RegisterService(&TextToSpeech_ServiceDesc, srv)
}

func _TextToSpeech_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Text)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TextToSpeechServer).Read(m, &textToSpeechReadServer{stream})
}

type TextToSpeech_ReadServer interface {
	Send(*Speech) error
	grpc.ServerStream
}

type textToSpeechReadServer struct {
	grpc.ServerStream
}

func (x *textToSpeechReadServer) Send(m *Speech) error {
	return x.ServerStream.SendMsg(m)
}

// TextToSpeech_ServiceDesc is the grpc.ServiceDesc for TextToSpeech service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TextToSpeech_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "read.TextToSpeech",
	HandlerType: (*TextToSpeechServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _TextToSpeech_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "read.proto",
}
